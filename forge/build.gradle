plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle'
}

version = "${minecraft_version}-${mod_version}-forge"

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

minecraft {
    mappings channel: 'parchment', version: parchment_version

    copyIdeResources = true //Calls processResources when in dev
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file(('../run'))
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                mosaic_cosmetics {
                    source sourceSets.main
                    source project(":Xplat").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file(('../run'))
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                mosaic_cosmetics {
                    source sourceSets.main
                    source project(":Xplat").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file(('../run'))
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('../Xplat/src/main/generated/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                mosaic_cosmetics {
                    source sourceSets.main
                    source project(":Xplat").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Xplat")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
}

compileJava {
    source(project(":Xplat").sourceSets.main.allSource)
}

tasks.named("sourcesJar", Jar) {
    from(project(":Xplat").sourceSets.main.allSource)
}

processResources {
    from project(":Xplat").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
